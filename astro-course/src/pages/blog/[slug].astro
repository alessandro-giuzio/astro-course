---
import { getCollection, getEntryBySlug } from 'astro:content';
import { Image, getImage } from 'astro:assets';

import Layout from '../../layouts/Layout.astro';
import Share from '../../components/Share.astro';
import { XataClient } from '../../xata';
import { getThumbnail } from '../../cloudinary';
import TableOfContents from '../../components/TableOfContents.astro';
import CommentList from '../../components/CommentList.astro';
import CommentForm from '../../components/CommentForm.astro';
import PostMeta from '../../components/PostMeta.astro';
import Main from '../../components/Main.astro';
import H1 from '../../components/H1.astro';

const xata = new XataClient({
  apiKey: import.meta.env.XATA_API_KEY,
  branch: import.meta.env.XATA_BRANCH,
});
const user = Astro.cookies.get('userId');
const { slug } = Astro.params;
if (Astro.request.method === 'POST') {
  const data = await Astro.request.formData();

  const post = data.get('post') as string;
  const comment = data.get('comment') as string;

  if (!user?.value) {
    return Astro.redirect(`/login?redirect=/blog/${slug}#comments`);
  }

  await xata.db.comments.create({
    post,
    text: comment,
    date: new Date(),
    user: user.value,
  });
  return Astro.redirect(`/blog/${slug}#comments`);
}

const post = await getEntryBySlug('posts', slug as string);

if (!post) {
  return Astro.redirect('/404');
}
const comments = await xata.db.comments
  .select(['id', 'text', 'date', 'user.name'])
  .filter({ post: post.slug })
  .getMany();
console.log(comments[0]);

const author = await getEntryBySlug('authors', post.data.author);

if (!author) {
  return Astro.redirect('/404');
}

const posts = await getCollection('posts');
const remainingPosts = posts.filter(p => p.slug !== post.slug);
const relatedPosts = remainingPosts.filter(p =>
  p.data.categories.some(category => post.data.categories.includes(category))
);

/* const reactionsDetails = await getReactionsDetailsByPost(
  post.slug,
  user?.value
); */
const { Content, headings } = await post.render();
const coverImageSource = (await getImage({ src: post.data.image })).src;
---

<Layout
  title={post.data.title}
  image={getThumbnail(post.data.title)}
  description={post.data.description}
>
  <Main>
    <a href='/blog' class='text-zinc-500 text-2xl block mb-16 underline'
      >‚ÜêBack to all blogs</a
    >
    <H1 text={post.data.title} />
    <PostMeta post={post} />
    <Image
      src={post.data.image}
      alt={post.data.title}
      width={1024}
      height={1024 / 1.5}
      class='rounded-2xl shadow-xl mb-28 aspect-thumbnail object-cover'
    />
    <div class='mb-10'>
      <TableOfContents headings={headings} />
    </div>
    <div class='relative'>
      <Share post={post} />
      <div class='prose prose-2xl overflow-visible relative'>
        <Content />
      </div>
    </div>
  </Main>
  <div class='bg-teal-100/30 py-14 relative border-b border-teal-900 mt-44'>
    <div id='comments' class='mb-4'>
      <h2>
        <span class='font-bold text-teal-900 text-4xl mr-12'>Comments</span>
        <span
          class='border border-teal-900 text-teal-900 rounded-full px-4 py-2 font-bold text-2xl'
          >{comments.length}</span
        >
      </h2>
    </div>
    <div class='max-w-7xl mx-auto'>
      <div class='mb-14'>
        <CommentForm />
      </div>
      <CommentList comments={comments} />
    </div>
  </div>
</Layout>
